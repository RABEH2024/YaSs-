Gemini 2.5 Pro Preview 03-25
Chat Prompt
yasmin-app.zip
229 688 tokens
اضف خاصية الصوت والتكلم مجانية من قوقل ستوديو api
حسنًا، سأقوم بإعادة بناء الكود ليكون تطبيق Flask (Python) احترافيًا يعتمد على واجهات برمجة تطبيقات مجانية قدر الإمكان، مع واجهة مستخدم محسنة ومجهز للنشر على Render.
الافتراضات والتغييرات:
الواجهة الخلفية: Flask (Python) كما في الملفات التي قدمتها.
قاعدة البيانات: PostgreSQL (كما هو متوقع لـ Render). سنستخدم SQLAlchemy.
المحادثة النصية (API):
الأولوية 1 (اختياري): Google Gemini (إذا تم توفير GOOGLE_API_KEY).
الأولوية 2 (افتراضي مجاني): Hugging Face Inference API (يتطلب HUGGINGFACE_API_TOKEN). سنستخدم نموذجًا مثل Mistral 7B Instruct أو Gemma 7B IT.
الأولوية 3 (احتياطي): ردود ثابتة في حالة عدم توفر أي مفتاح أو فشل الـ APIs.
الصوت (TTS/STT): سنستخدم Web Speech API المدمجة في المتصفح (مجانية). سيتم التعامل معها بالكامل في JavaScript بالواجهة الأمامية.
الواجهة الأمامية: HTML + CSS + Vanilla JavaScript (يتم تقديمه بواسطة Flask).
الاحترافية:
تصميم داكن/فاتح قابل للتبديل.
حفظ المحادثات في قاعدة البيانات.
إمكانية بدء محادثة جديدة وحذف القديمة.
إعدادات لاختيار النموذج (إذا كان OpenRouter متاحًا، لكن سنركز على HF/Gemini)، درجة الحرارة، إلخ.
أزرار نسخ وإعادة توليد للردود.
مؤشر للكتابة.
مؤشر لحالة الاتصال/عدم الاتصال.
تصميم متجاوب.
Render: سيتم تجهيز الملفات وهيكل المشروع ليكون متوافقًا مع Render. سنحتاج لملف render.yaml.
إزالة لوحة التحكم: لن يتم تضمين أي مسارات أو نماذج خاصة بالمشرفين.
هيكل الملفات:
yasmine-app/
├── app.py                 # ملف Flask الرئيسي (Routes, App Setup)
├── main.py                # نقطة الدخول لتشغيل التطبيق وإنشاء الجداول
├── models.py              # نماذج SQLAlchemy (Conversation, Message)
├── requirements.txt       # اعتماديات Python
├── static/
│   ├── css/
│   │   └── styles.css     # ملف CSS الرئيسي
│   └── js/
│       └── app.js         # ملف JavaScript للواجهة الأمامية
├── templates/
│   └── index.html         # قالب HTML الرئيسي
├── .env                   # (أنشئه بنفسك) متغيرات البيئة
├── .gitignore
└── render.yaml            # ملف إعدادات Render
Use code with caution.
ملف 1: الإعدادات والاعتماديات (requirements.txt, .env, .gitignore, render.yaml)
# ==================================================
# =============== FILE 1: SETUP FILES ==============
# ==================================================

# ==================================================
# === requirements.txt ===
# ==================================================
Flask>=2.3.0,<3.0.0
Flask-SQLAlchemy>=3.0.0,<4.0.0
SQLAlchemy>=1.4.0,<2.1.0 # تحديد إصدار متوافق مع Flask-SQLAlchemy 3.x
psycopg2-binary>=2.9.0,<3.0.0 # لـ PostgreSQL
requests>=2.28.0,<3.0.0
python-dotenv>=1.0.0,<2.0.0
gunicorn>=20.0.0,<23.0.0 # لخادم الإنتاج على Render
google-generativeai>=0.4.0 # لـ Gemini API
huggingface_hub>=0.19.0 # للحصول على معلومات النموذج (اختياري)
# email-validator غير مطلوب إذا لم يكن هناك تسجيل دخول معقد
# Flask-Login أو Flask-Session يمكن إضافتهما لاحقًا إذا احتجت لإدارة جلسات المستخدم

# ==================================================
# === .env (أنشئ هذا الملف بنفسك) ===
# ==================================================
# (مطلوب للخيار المجاني الافتراضي) رمز Hugging Face API
# احصل عليه من: https://huggingface.co/settings/tokens
HUGGINGFACE_API_TOKEN="hf_YOUR_HUGGINGFACE_TOKEN"

# (اختياري - أولوية أعلى إذا وُجد) مفتاح Google Gemini API
# احصل عليه من Google AI Studio: https://aistudio.google.com/app/apikey
GOOGLE_API_KEY="AIzaSyYOUR_GEMINI_API_KEY"

# (مطلوب) رابط قاعدة بيانات PostgreSQL من Render أو أي مزود آخر
# مثال: postgresql://user:password@host:port/database
DATABASE_URL="postgresql://..."

# (اختياري) مفتاح سري لجلسات Flask (إذا استخدمت لاحقًا)
# SESSION_SECRET="غير_هذا_المفتاح_السري_في_الإنتاج"

# (اختياري) عنوان URL للتطبيق (مهم لـ OpenRouter إذا استخدمته)
# APP_URL="https://your-app-name.onrender.com"

# ==================================================
# === .gitignore ===
# ==================================================
__pycache__/
*.pyc
*.pyo
*.pyd
.env
.DS_Store
venv/
dist/
build/
*.egg-info/
instance/
